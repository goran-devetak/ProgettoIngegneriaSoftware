openapi: 3.0.3
info:
  title: Comune Parking Management API
  description: "API for managing municipal parking, including authentication, parking\
    \ status updates, and reporting."
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/GORANDEVETAK/ProgAPI/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.parking-comune.it/v1
paths:
  /users/login:
    post:
      summary: Log in
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /parking-lots:
    get:
      summary: Retrieve a list of parking lots
      responses:
        "200":
          description: List of parking lots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingLot'
    post:
      summary: Create a new parking lot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parkinglots_body'
        required: true
      responses:
        "201":
          description: Parking lot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
  /parking-lots/{id}/status:
    patch:
      summary: Update the status of a parking lot
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id_status_body'
        required: true
      responses:
        "200":
          description: Parking lot status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
        "404":
          description: Parking lot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reports:
    get:
      summary: Retrieve a list of reports
      responses:
        "200":
          description: List of reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
    post:
      summary: Create a new report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reports_body'
        required: true
      responses:
        "201":
          description: Report created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
  /statistics/parking-lots/{id}:
    get:
      summary: Get specific statistics for a parking lot
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Statistics for the specific parking lot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingStatistics'
components:
  schemas:
    UserLogin:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ParkingLot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        address:
          $ref: '#/components/schemas/ParkingLot_address'
        status:
          type: string
          enum:
          - "true"
          - "false"
          - pending
        spotsNumber:
          type: number
    Spot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        parking_lot_id:
          type: integer
        status:
          type: boolean
        category:
          type: string
          enum:
          - sharing
          - privato
          - libero
      description: ciao mi chiamo Luis
    Reservation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_id:
          type: integer
        spot_id:
          type: integer
        category:
          type: string
          enum:
          - sharing
          - privato
          - libero
      description: Prenotazione posto da un utente
    Report:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        parking_lot_id:
          type: integer
        description:
          type: string
        photo_url:
          type: string
          nullable: true
    ParkingStatistics:
      type: object
      properties:
        parking_lot_id:
          type: integer
        info_model:
          type: string
          description: info sul tipo di modello/eventuali extra
        current_supplied:
          type: number
        total_spots:
          type: integer
        available_spots:
          type: integer
        avg_daily_usage:
          type: number
        usage_by_hour:
          maxItems: 24
          minItems: 24
          type: array
          description: Array representing hourly usage (12 values for 12 hour).
          items:
            maximum: 1000
            minimum: 0
            type: integer
    GeneralStatistics:
      type: object
      properties:
        current_supplied:
          type: number
        avg_daily_usage:
          type: number
        usage_by_hour:
          maxItems: 24
          minItems: 24
          type: array
          description: Array representing hourly usage (24 values for 24 hour).
          items:
            maximum: 1000
            minimum: 0
            type: integer
    inline_response_200:
      type: object
      properties:
        message:
          type: string
          example: Login successful
    parkinglots_body:
      allOf:
      - $ref: '#/components/schemas/ParkingLot'
      - required:
        - address
        - name
        - status
        type: object
    id_status_body:
      allOf:
      - $ref: '#/components/schemas/ParkingLot'
      - required:
        - status
        type: object
        properties:
          name:
            readOnly: true
          address:
            readOnly: true
    reports_body:
      allOf:
      - $ref: '#/components/schemas/Report'
      - required:
        - description
        - parking_lot_id
        type: object
    ParkingLot_address:
      type: object
      properties:
        via:
          type: string
        stAddress:
          type: number
        cap:
          type: number
        long:
          type: number
        lat:
          type: number
