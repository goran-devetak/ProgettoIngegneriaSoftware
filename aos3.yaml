openapi: 3.0.3
info:
  version: 1.0.0
  title: API per il Progetto di Ingegneria del Software
  description: Api per gestire i parcheggi dei monopattini nel comune di Trento
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/GORANDEVETAK/ProgAPI/1.0.0
  - url: https://api.parking-comune.it/v1

# DEFINING ENDPOINTS
paths:
  # STATION
  /stations:
    get: 
      description: Returns the list of stations
      responses:
        200:
          description: Station list returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stations'
        404:
          description: Page not found
        500:
          description: Internal server error
          
  /advanced:           
    post:
      description: Creates a new station in the database
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                address:
                  $ref: '#/components/schemas/address'
                num_slots:
                  type: number
                state:
                  type: string
                  enum: [active, inactive, reported]
      responses:
        200:
          description: New station added successfully
        400:
          description: Missing required fields
        
  /stations/{id}:
    get:
      description: Returns information about a specific station
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the station
          schema:
            type: integer
      responses:
        200:
          description: Station returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/station'
        404:
          description: Station not found
          # I probably need to create a schema error that I return when error occurs
        500:
          description: Internal server error
            
    patch:
      description: Changes the state of the station (active/inactive/reported)
      parameters: 
        - in: path
          name: id
          required: true
          description: The ID of the station
          schema:
            type: integer
      requestBody:
        description: New state to update the current one
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                state:
                  type: string
                  enum: [active, inactive, reported]
                  description: New state for the station
              required:
                - state
      responses:
        200:
          description: Station state updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                  state:
                    type: string
                    enum: [active, inactive, reported]
        400:
          description: Invalid state
        404:
          description: Updated station not found
        500:
          description: Internal server error
                    
    post:
      description: Adds a slot to the current station
      parameters: 
        - in: path
          name: id
          required: true
          description: ID of the station
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  enum: [free, sharing, private]
      responses:
        200:
          description: New slot added successfully
        400:
          description: Invalid category
        404:
          description: Updated station not found
        500:
          description: Internal server error
  
  /stations/{id}/{slotid}:
    get:
      description: Returns the info about a single slot
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the station
          schema:
            type: integer
        - in: path
          name: slotid
          required: true
          description: ID of the slot
          schema:
            type: integer
      responses:
        200:
          description: Slot returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slot'
        404:
          description: Slot or Station not found
        500:
          description: Internal server error
                
    patch:
      description: Changes the state of the slot (free/occupied)
      parameters: 
        - in: path
          name: id
          required: true
          description: ID of the station
          schema:
            type: integer
        - in: path
          name: slotid
          required: true
          description: ID of the slot
          schema:
            type: integer
      requestBody:
        description: New state to update the current one
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: boolean
                  description: New state for the slot
              required: 
                - state
      responses:
        200:
          description: Slot state updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  state:
                    type: boolean
        400:
          description: Invalid state
        404:
          description: Station or Slot not found
  
  /reports:
    get:
      description: Returns the list of reports
      responses:
        200:
          description: List of reports returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reports'
        404:
          description: Reports not found
    
    post:
      description: Adds a new report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description: 
                  type: string
                photo:
                  type: string
                contacts:
                  type: object
                  properties:
                    email:
                      type: string
                    phone:
                      type: number
      responses:
        200:
          description: New report created successfully
        400:
          description: Missing required fields
        500:
          description: Internal server error
  
  /reports/{id}:
    get:
      description: Returns info about a specific report
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the report
          schema:
            type: integer
      responses:
        200:
          description: Report returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report'
        404:
          description: Report not found
        500: 
          description: Internal server error
    
    patch:
      description: Change the state of the report (reported/resolved)
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the report
          schema:
            type: integer
      requestBody:
        description: New state to update the current one
        required: true
        content:
          application/json:
            schema: 
              type: object
              properties:
                state:
                  type: boolean
              required:
                - state
      responses:
        200:
          description: Report state updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  state:
                    type: boolean
        400:
          description: State not valid
        404:
          description: Report not found
        500:
          description: Internal server error
          
    

# DEFINING RESOURCES:
components:
  schemas:
    station:
      type: object
      properties:
        name:
          type: string
        address:
          $ref: '#/components/schemas/address'
        numSlots:
          type: number
        # Remove state and change it to active and reported with boolean
        state:
          type: string
          enum: [active, inactive, reported]
        slotList:
          type: array
          items:
            $ref: '#/components/schemas/slot'
        reportList:
          $ref: '#/components/schemas/reports'
    
    stations:
      type: array
      items:
        $ref: '#/components/schemas/station'
            
    slot:
      type: object
      properties:
        state:
          type: boolean
        category:
          type: string
          enum: [free, sharing, private]
        uses:
          type: array
          items:
            $ref: '#/components/schemas/use'
        
        
    report:
      type: object
      properties:
        state:
          type: boolean
        description:
          type: string
        photo:
          type: string
        contacts:
          type: object
          properties:
            email:
              type: string
            phone:
              type: number
    
    reports:
      type: array
      items:
        $ref: '#/components/schemas/report'
              
    address:
      type: object
      properties:
        street:
          type: string
        number:
          type: number
        city:
          type: string
        zipCode:
          type: number
        longitude:
          type: number
        latitude: 
           type: number
           
    use:
      type: object
      properties:
        userId:
          type: number
        timestamp:
          type: number
        service:
          type: string
